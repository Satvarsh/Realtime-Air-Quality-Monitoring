#include <WiFi.h>
#include <PubSubClient.h>
const char *ssid = "-----";
const char *password = "-----";
const byte SWITCH_PIN = 0; // Pin to control the Gas Sensor with
const char *ID = "IOT_Project";
const char *TOPIC = "MQ135/CO2";
IPAddress broker(192,168,1,-);
WiFiClient wclient;
PubSubClient client(wclient); // Setup MQTT client
bool state=0;
// Connect to WiFi network
void setup_wifi() {
Serial.print("\nConnecting to ");
Serial.println(ssid);
WiFi.begin(ssid, password); // Connect to network
while (WiFi.status() != WL_CONNECTED) { // Wait for connection
 delay(500);
 Serial.print(".");
 }
Serial.println();
Serial.println("WiFi connected");
Serial.print("IP address: ");
Serial.println(WiFi.localIP());
}
void reconnect() {
while (!client.connected()) {
 Serial.print("Attempting MQTT connection...");
 if (client.connect(ID)) {
 Serial.println("connected");
 Serial.print("Publishing to: ");
 Serial.println(TOPIC);
 Serial.println('\n');
 } else {
 Serial.println(" try again in 5 seconds");
 delay(5000);
 } }}
void setup() {
Serial.begin(115200);
pinMode(SWITCH_PIN,INPUT);
digitalWrite(SWITCH_PIN,HIGH);
delay(100);
setup_wifi();
client.setServer(broker, 1883);
}
void loop() {
if (!client.connected())
 {
 reconnect();
 }
client.loop();
// if the switch is being pressed
if(digitalRead(SWITCH_PIN) == 0)
 {
 state = !state; //toggle state
 if(state == 1) // ON
 {
 client.publish(TOPIC, "on");
 Serial.println((String)TOPIC + " => on");
 }
 else // OFF
 {
 client.publish(TOPIC, "off");
 Serial.println((String)TOPIC + " => off");
 }
 while(digitalRead(SWITCH_PIN) == 0)
 {
 yield();
 delay(20);
 }
 }
}
Paho MQTT Model:
Main Loop:
public void connect(){
 String clientId = MqttClient.generateClientId();
 final MqttAndroidClient client =
 new MqttAndroidClient(this.getApplicationContext(),
"tcp://m12.cloudmqtt.com:17389",
 clientId);
 MqttConnectOptions options = new MqttConnectOptions();
 options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1);
 options.setCleanSession(false);
 options.setUserName("Enter Your MQTT UserName Here");
 options.setPassword("Enter Your MQTT Password
Here".toCharArray());
 try {
 IMqttToken token = client.connect(options);
 //IMqttToken token = client.connect();
 token.setActionCallback(new IMqttActionListener() {
 @Override
 public void onSuccess(IMqttToken asyncActionToken) {
 // We are connected
Log.d("file", "onSuccess");
 //publish(client,"payloadd");
subscribe(client,"dht");
 subscribe(client,"bmp");
 client.setCallback(new MqttCallback() {
 TextView tt = (TextView) findViewById(R.id.tt);
 TextView th = (TextView) findViewById(R.id.th);
 @Override
 public void connectionLost(Throwable cause) {
 }
 @Override
 public void messageArrived(String topic,
MqttMessage message) throws Exception {
 Log.d("file", message.toString());
 if (topic.equals("dht")){
 tt.setText(message.toString());
 }
 if (topic.equals("bmp")){
 th.setText(message.toString());
 }
 }
 @Override
 public void deliveryComplete(IMqttDeliveryToken
token) {
 }
 });
 }
 @Override
 public void onFailure(IMqttToken asyncActionToken,
Throwable exception) {
 // Something went wrong e.g. connection timeout or
firewall problems
 Log.d("file", "onFailure");
 }
 });
 } catch (MqttException e) {
 e.printStackTrace();}}
